#!/usr/bin/env groovy


def runTestsInDocker(container, containerParams, testFolder, envParams, testResultFolderName, onFail) {
	container.inside(containerParams) {
		try {
	          withEnv(envParams) {
	            sh "dotnet test ${testFolder}/PayPal.Core.SDK.NETCore.Tests.csproj --configuration Release --logger \"trx;LogFileName=unittestresults.trx\" -r TestResults /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
	          }
	        }
		catch (Exception ex) {
			onFail() 
			throw ex
		}
	        finally {
	          // due to MSTestPublisher work incorrectly with docker agent folder we have to copy it into current dir
	          sh "cp ${testResultFolderName}/unittestresults.trx ./${testResultFolderName}/netcore.unittestresults.trx || echo \"Absent file ${testResultFolderName}/unittestresults.trx\""
	          //sh "cp ${testResultFolderName}/coverage.cobertura.xml ./${testResultFolderName}/netcore.coverage.xml || echo \"Absent file ${testResultFolderName}/coverage.cobertura.xml\""
	        }
	}
}

def publishTestArtifacts() 
{
  //step([$class: 'CoberturaPublisher',
  //  coberturaReportFile: '**/*.coverage.xml',
  //  maxNumberOfBuilds: 0,
  //  onlyStable: false,
  //  sourceEncoding: 'ASCII',
  //  zoomCoverageChart: false])
  step([$class: 'MSTestPublisher', testResultsFile:"**/*.trx", failOnError: true, keepLongStdio: true])
}

node{
  def revision
  def branchName
 
  stage('Checkout') {
    deleteDir()

    def scmVars = checkout scm
    revision = scmVars.GIT_COMMIT
    branchName = scmVars.GIT_BRANCH
    brabchName = branchName.replaceAll('/', '-')
  }

  def buildDockerContainer
  def testResultFolderName='Source/UnitTests/TestResults'
  stage ('Build') {
      buildDockerContainer = docker.build("build:${revision}", '--no-cache --build-arg branch_name=${branchName} -f Source/Dockerfile.newflow .')
      sh "mkdir ${testResultFolderName}"
  }

  stage ('Run Unit Tests') {
    runTestsInDocker(buildDockerContainer, '', 'Source/UnitTests', [], testResultFolderName, { publishTestArtifacts() })
  }

  stage ('Publish Test Artifacts') {
    publishTestArtifacts()
  }

  stage ('Create NuGet package') {
	buildDockerContainer.inside(''){
		sh "dotnet pack Source/SDK/PayPal.Core.SDK.NETCore.csproj -c Release -o Package --version-suffix ${branchName}"
	}
  }

}
